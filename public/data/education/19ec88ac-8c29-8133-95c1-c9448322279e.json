{
  "id": "19ec88ac-8c29-8133-95c1-c9448322279e",
  "title": "SAVE_TEXT 명령어",
  "content": "\n## **Result**\n\n\n![img.png](https://blog.kakaocdn.net/dn/mMyIv/btrnjepG6HZ/X3kzt8bW0sddL8URTGPNGK/img.png)\n\n\n## **Example**\n\n\n```c++\n#include <HardwareSerial.h>\n\n#define MAX_SERIAL_BUF 1024\n#define PACKET_SIZE (9*1024)+20 // 9Kbyte + 20byte\n#define STX 0x02\n#define ETX 0x03\n//#define ACK 0x06\n#define NCK 0x15\n\n/*  Transmit Protocol Packet Define */\n#define SIZE_STX        1\n#define SIZE_LEN1       2\n#define SIZE_LEN2       2\n#define SIZE_CMD                1\n#define SIZE_CRC                2\n#define SIZE_ETX                1\n#define SIZE_FIELD              5\n#define SIZE_PAGE               1\n#define SIZE_SET_DRAW_FIELD     SIZE_FIELD + SIZE_PAGE + SIZE_LEN1\n#define SIZE_WIFI_SSID          1\n#define SIZE_WIFI_PW            1\n#define SIZE_WIFI_STATUS        1\n#define SIZE_PKT_DATA     SIZE_STX + SIZE_LEN1 + SIZE_LEN2 + SIZE_CMD + SIZE_CRC + SIZE_ETX;\n\n#define IDX_STX         0\n#define IDX_LEN         IDX_STX + SIZE_STX\n#define IDX_CMD         IDX_LEN + SIZE_LEN1 + SIZE_LEN2\n#define IDX_CRC         IDX_CMD + SIZE_CMD\n#define IDX_ETX         IDX_CRC + SIZE_CRC\n\n/* Byte Size Define */\n#define INIT_VALUE            0\n#define SIZE_TEXT_LEN         1\n#define SIZE_FONT_SIZE            1\n#define SIZE_FONT_COLOR         3\n#define SIZE_BG_COLOR         3\n#define SIZE_WORD_LEN         1\n#define SIZE_ACTION_CMD         1\n#define SIZE_ACTION_TIME        2\n#define SIZE_TEXT_GROUP_COUNT   1\n#define SIZE_EFFECT_PACKET   9\n\n#define SET_TEXT                    0x21\n#define SET_COLOR_TEXT              0x51\n#define SAVE_TEXT                   0xA1\n\nstatic const unsigned short crc16tab[256]= {\n  0x0000,0x1021,0x2042,0x3063,0x4084,0x50a5,0x60c6,0x70e7,\n  0x8108,0x9129,0xa14a,0xb16b,0xc18c,0xd1ad,0xe1ce,0xf1ef,\n  0x1231,0x0210,0x3273,0x2252,0x52b5,0x4294,0x72f7,0x62d6,\n  0x9339,0x8318,0xb37b,0xa35a,0xd3bd,0xc39c,0xf3ff,0xe3de,\n  0x2462,0x3443,0x0420,0x1401,0x64e6,0x74c7,0x44a4,0x5485,\n  0xa56a,0xb54b,0x8528,0x9509,0xe5ee,0xf5cf,0xc5ac,0xd58d,\n  0x3653,0x2672,0x1611,0x0630,0x76d7,0x66f6,0x5695,0x46b4,\n  0xb75b,0xa77a,0x9719,0x8738,0xf7df,0xe7fe,0xd79d,0xc7bc,\n  0x48c4,0x58e5,0x6886,0x78a7,0x0840,0x1861,0x2802,0x3823,\n  0xc9cc,0xd9ed,0xe98e,0xf9af,0x8948,0x9969,0xa90a,0xb92b,\n  0x5af5,0x4ad4,0x7ab7,0x6a96,0x1a71,0x0a50,0x3a33,0x2a12,\n  0xdbfd,0xcbdc,0xfbbf,0xeb9e,0x9b79,0x8b58,0xbb3b,0xab1a,\n  0x6ca6,0x7c87,0x4ce4,0x5cc5,0x2c22,0x3c03,0x0c60,0x1c41,\n  0xedae,0xfd8f,0xcdec,0xddcd,0xad2a,0xbd0b,0x8d68,0x9d49,\n  0x7e97,0x6eb6,0x5ed5,0x4ef4,0x3e13,0x2e32,0x1e51,0x0e70,\n  0xff9f,0xefbe,0xdfdd,0xcffc,0xbf1b,0xaf3a,0x9f59,0x8f78,\n  0x9188,0x81a9,0xb1ca,0xa1eb,0xd10c,0xc12d,0xf14e,0xe16f,\n  0x1080,0x00a1,0x30c2,0x20e3,0x5004,0x4025,0x7046,0x6067,\n  0x83b9,0x9398,0xa3fb,0xb3da,0xc33d,0xd31c,0xe37f,0xf35e,\n  0x02b1,0x1290,0x22f3,0x32d2,0x4235,0x5214,0x6277,0x7256,\n  0xb5ea,0xa5cb,0x95a8,0x8589,0xf56e,0xe54f,0xd52c,0xc50d,\n  0x34e2,0x24c3,0x14a0,0x0481,0x7466,0x6447,0x5424,0x4405,\n  0xa7db,0xb7fa,0x8799,0x97b8,0xe75f,0xf77e,0xc71d,0xd73c,\n  0x26d3,0x36f2,0x0691,0x16b0,0x6657,0x7676,0x4615,0x5634,\n  0xd94c,0xc96d,0xf90e,0xe92f,0x99c8,0x89e9,0xb98a,0xa9ab,\n  0x5844,0x4865,0x7806,0x6827,0x18c0,0x08e1,0x3882,0x28a3,\n  0xcb7d,0xdb5c,0xeb3f,0xfb1e,0x8bf9,0x9bd8,0xabbb,0xbb9a,\n  0x4a75,0x5a54,0x6a37,0x7a16,0x0af1,0x1ad0,0x2ab3,0x3a92,\n  0xfd2e,0xed0f,0xdd6c,0xcd4d,0xbdaa,0xad8b,0x9de8,0x8dc9,\n  0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1,\n  0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,\n  0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0\n};\n\nvoid transmit_data(char cmd, char* data, uint32_t len);\nuint16_t crc16_ccitt(uint8_t *buf, int len);\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial2.begin(115200,SERIAL_8N1, 18, 19);\n  // put your main code here, to run repeatedly:\n  char * text = \"날씨\\n맑음\"; //  디스플레이 출력 텍스트 : \"미세\\n먼지\\n좋음\"\n  int textColor = 0x00ff0000; //  폰트 컬러 : red\n  int bgColor = 0x00000000;   //  배경 색 : black\n  uint8_t fontSize = 1;       //  폰트 크기 : 1\n  uint8_t actionCmd = 0x00;   //  액션 : 디폴트 \n  uint8_t pageNum = 1;        //  페이지 : 1\n  short actionTime = 0x00;    //  액션 이동 시간 : 00\n  uint8_t effectCmd = 0x00; //  효과 : 없음\n  short effectBorderTime = 0x00;   //  Effect Border Blink 주기\n  int effectBorderColor  = 0;      //  Effect Border RGB 색상\n  uint8_t effectColorSpeed= 0x00;  // Effect Color effect 주기\n  short effectStarRainTime= 0x00; //Effect  Star 속도\n\n  char * sendBuf;\n  uint8_t textLen;\n  int idx= 0;\n  int sendBufLen;\n  uint8_t cmd;\n  uint8_t fontColor[3];\n  uint8_t scrColor[3];\n  textLen = strlen(text);\n  sendBufLen = SIZE_PAGE + SIZE_TEXT_LEN + textLen + SIZE_FONT_SIZE + SIZE_FONT_COLOR + SIZE_BG_COLOR + SIZE_ACTION_CMD + SIZE_ACTION_TIME +SIZE_EFFECT_PACKET;\n  sendBuf = (char*)malloc(sendBufLen); \n\n  fontColor[0] = (uint8_t) (((textColor & 0x00ff0000) >> 16) / 8);  // font color - red\n  fontColor[1] = (uint8_t) (((textColor & 0x0000ff00) >> 8) / 8);   // font color - blue\n  fontColor[2] = (uint8_t) (((textColor & 0x000000ff) >> 0) / 8);   // font color - blue\n  scrColor[0] = (uint8_t) (((bgColor & 0x00ff0000) >> 16) / 8);     // screen color - red\n  scrColor[1] = (uint8_t) (((bgColor & 0x0000ff00) >> 8) / 8);      // screen color - blue\n  scrColor[2] = (uint8_t) (((bgColor & 0x000000ff) >> 0) / 8);      // screen color - blue\n\n  sendBuf[idx++] = pageNum;            \n  sendBuf[idx++] = textLen;            \n\n  for (int i = 0; i <textLen; i++) {\n    sendBuf[idx++] = text[i];\n  }\n\n  sendBuf[idx++] = fontSize;           \n  sendBuf[idx++] = fontColor[0];       \n  sendBuf[idx++] = fontColor[1];       \n  sendBuf[idx++] = fontColor[2];       \n  sendBuf[idx++] = scrColor[0];      \n  sendBuf[idx++] = scrColor[1];       \n  sendBuf[idx++] = scrColor[2];       \n  sendBuf[idx++] = actionCmd;\n  sendBuf[idx++] = (actionTime & 0x0000ff00 >> 8);\n  sendBuf[idx++] = (actionTime & 0x000000ff); \n\n  sendBuf[idx++] = (effectCmd& 0x000000ff);\n  sendBuf[idx++] = (effectBorderTime & 0x0000ff00 >> 8);\n  sendBuf[idx++] = (effectBorderTime & 0x000000ff);\n  sendBuf[idx++] = (((effectBorderColor & 0x00ff0000) >> 16) / 8);\n  sendBuf[idx++] = (((effectBorderColor & 0x0000ff00) >> 8) / 8);\n  sendBuf[idx++] = (((effectBorderColor & 0x000000ff) >> 0) / 8);\n  sendBuf[idx++] = effectColorSpeed;\n  sendBuf[idx++] = ((effectStarRainTime & 0x0000ff00) >> 8);\n  sendBuf[idx++] = (effectStarRainTime & 0x000000ff);  \n\n  cmd = (uint8_t)SAVE_TEXT;\n  transmit_data(cmd, (char*)sendBuf, sendBufLen);\n  free(sendBuf);\n}\n\nvoid loop() {\n\n}\n\nvoid transmit_data(char cmd, char* data, uint32_t len)\n{\n  uint16_t crc = 0;\n  uint32_t inx = 0;\n  uint8_t* sendData;\n  uint8_t* cmdData;\n  uint16_t dataLen;\n  uint16_t sendLen;\n  uint16_t sendDataLen;\n\n  dataLen = (uint16_t)(len + SIZE_CMD);\n  sendLen = len + SIZE_PKT_DATA; \n\n  sendDataLen = sendLen + 2; // +2 is newline Word \n  sendData = (uint8_t*)malloc(sendDataLen);\n  memset(sendData, 0, sendLen);\n  sendData[inx++] = STX;\n  sendData[inx++] = (uint8_t)(dataLen);\n  sendData[inx++] = (uint8_t)(dataLen >> 8);\n  sendData[inx++] = (uint8_t)(dataLen);\n  sendData[inx++] = (uint8_t)(dataLen >> 8);\n  sendData[inx++] = cmd;\n    \n  for (int i=0; i<len; i++) {\n    sendData[inx++] = data[i];\n  }\n  cmdData = (uint8_t*)malloc(dataLen);\n  memset(cmdData, 0, dataLen);\n  memcpy(cmdData, sendData + IDX_CMD, dataLen);\n  crc = crc16_ccitt(cmdData, dataLen);\n  sendData[inx++] = (crc & 0xFF00) >> 8;\n  sendData[inx++] = (crc & 0x00FF);\n  \n  sendData[inx++] = ETX;\n  sendData[inx++] = 0x0A;\n  sendData[inx++] = 0x0D;  \n\n  for (int i=0; i < sendDataLen; i++) {\n    Serial2.write(sendData[i]);\n      Serial.printf(\"%02X \", sendData[i]);\n  }\n\n  free(cmdData);\n  free(sendData);\n}\n\nuint16_t crc16_ccitt(uint8_t *buf, int len)\n{\n  int counter;\n  unsigned short crc = 0;\n  for( counter = 0; counter < len; counter++)\n    //crc = (crc<<8) ^ crc16tab[((crc>>8) ^ buf[counter]) &0x00FF];\n    crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(uint8_t *)buf++)&0x00FF];\n  return crc;\n}\n```\n\n",
  "lastUpdateDate": "2025-02-18T08:56:00.000Z",
  "imgUrl": ""
}